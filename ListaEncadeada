package listas;

public class ListaEncadeada<T> {
	
	private No<T> inicio; // para o primeiro elemento
	private No<T> ultimo; // para o ultimo elemento
	private int tamanho = 0;
	
	private final int NAO_ENCONTRADO = -1;
	private final String NAO_EXISTE = "Posição não existe.";
	private final String LISTA_VAZIA = "Lista está vazia .";
	
//	Criar um bloquinho (no), fazer o inicio apontar para o 1°No e por o ++ para aumentar o tamanho; se for uma lista de 1 elemento, o ultimo aponta para o primeiro nó. 
//	Se tiver mais, o ponteiro "ultimo" muda para a ultima celula inserida.
	
	public void adiciona(T elemento) {
		No<T> celula = new No<T>(elemento); 
		if(this.tamanho == 0) {
			this.inicio = celula;
		}else {
			this.ultimo.setProximo(celula);
		}
		this.ultimo = celula;
		this.tamanho++;
	}
	
	public void adicionaInicio(T elemento) {
		if(this.tamanho == 0) {
			No<T> novoNo = new No<>(elemento);
			this.inicio = novoNo;
			this.ultimo = novoNo;
		}else {
			No<T> novoNo = new No<>(elemento, this.inicio);
			this.inicio = novoNo;
		}
		this.tamanho++;
	}
	
	public void adiciona(int posicao, T elemento) {
		
		if(this.posicaoNaoExiste(posicao)) {
			throw new IllegalArgumentException(NAO_EXISTE);
		}
		
		if(posicao ==0) { // está vazia, ent add no começo
			this.adicionaInicio(elemento);
		}else if(posicao == this.tamanho) { // adiciona o elemento no final
			this.adiciona(elemento);
		} else { // adiciona no meio
			No<T> noAnterior = this.buscaNo(posicao);
			No<T> proximoNo = noAnterior.getProximo();
			No<T> novoNo = new No<>(elemento, proximoNo);
			noAnterior.setProximo(novoNo);
			this.tamanho++;
		}
	}
	
	public T removeInicio() {
		
		if(this.tamanho == 0) {
			throw new RuntimeException(LISTA_VAZIA);
		}
		T removido = this.inicio.getElemento();
		this.inicio = this.inicio.getProximo();
		this.tamanho --;
		
		if(this.tamanho == 0) {
			this.ultimo = null;
		}
		return removido;
	}
	
	public T removeFinal() {
		
		if(this.tamanho == 0) {
			throw new RuntimeException(LISTA_VAZIA);
		}
		if(this.tamanho == 1) {
			return this.removeInicio();
		}
		No<T> penultimoNo = this.buscaNo(this.tamanho -2);
		T removido = penultimoNo.getProximo().getElemento();	
		penultimoNo.setProximo((null));
		this.ultimo = penultimoNo;
		tamanho--;
		return removido;
		
	}
	
	private boolean posicaoNaoExiste(int posicao) {
		return (!(posicao >= 0 && posicao <= this.tamanho));
	}
	
//	remover elemento de qualquer posição
	public T remove(int posicao) {
		
		if(posicao == 0) {
			return this.removeInicio();
		}
		if(posicao == this.tamanho-1) {
			return this.removeFinal();
		}
		No<T> noAnterior = this.buscaNo(posicao -1);
			No<T> atual = noAnterior.getProximo(); 
			No<T> proximo = atual.getProximo();
			noAnterior.setProximo(proximo);
			atual.setProximo(null);
			this.tamanho--;
		return atual.getElemento();
		
	}

	
//	pegar o tamanho da lista
	public int getTamanho() {
		return this.tamanho;
	}
	
//	Limpar a lista
	
	public void limpa() {
		
		for(No<T> atual = this.inicio; atual != null;) {
			No<T> proximo = atual.getProximo();
			atual.setElemento(null);
			atual.setProximo( null);
			atual = proximo;
		}
		
		this.inicio = null;
		this.ultimo = null;
		this.tamanho = 0;
	}
	
	private No<T> buscaNo(int posicao){
		
		if(this.posicaoNaoExiste(posicao)) {
			throw new IllegalArgumentException(NAO_EXISTE);
		}
		
		No<T> noAtual = this.inicio;
		for(int i = 0; i < posicao; i++) {
			noAtual =  noAtual.getProximo(); // mover ponteiro de um nó para outro e quando terminar vai apontar para o nó que estamos buscando
		}
		return noAtual;
	}
//  buscar se a posicao existe
	public T buscaPorPosicao(int posicao) {
		return this.buscaNo(posicao).getElemento();
	}
	
//	buscar se um elemento existe
	public int busca(T elemento) {
		
		No<T> noAtual = this.inicio;
		int pos = 0; 
		
		while(noAtual != null) {
			
			if(noAtual.getElemento().equals(elemento)) {
				return pos;
			}
			pos++;
			noAtual = noAtual.getProximo();
		}
		
		
		return NAO_ENCONTRADO;
	}
	

	@Override
//	[1 2 3 4 5]
	public String toString() {
		
		if(this.tamanho ==0) {
			return "[]";
		}
		
		StringBuilder builder = new StringBuilder("[");
		
		No<T> atual = this.inicio;
		for(int i = 0; i < this.tamanho - 1; i++) {
			builder.append(atual.getElemento()).append(",");
			atual = atual.getProximo();
		}
		builder.append(atual.getElemento()).append("]");
		/*builder.append(atual.getElemento()).append(",");
		while(atual.getProximo() != null) {
			atual = atual.getProximo();
			builder.append(atual.getElemento()).append(",");
		}
		*/
		
		return builder.toString();
	}
}
